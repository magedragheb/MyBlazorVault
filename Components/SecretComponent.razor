@page "/secret/{id:int}"
@using MyBlazorVault.Services
@using MyBlazorVault.Data
@using Blazored.FluentValidation
@using Serilog
@inject VaultService vault
@inject NavigationManager uriHelper

<h2>Edit</h2>

<EditForm Model="@secret" OnValidSubmit="@SubmitValidForm">

    <FluentValidationValidator @ref="validator" DisableAssemblyScanning="@true" />
    <ValidationSummary />

    <div class="col-md-6">
        <label for="title" class="form-label">Title</label>
        <InputText id="title" class="form-control" @bind-Value="secret.Title" />
        <ValidationMessage For="@(() => secret.Title)" />
    </div>

    <div class="col-md-6">
        <label for="userName" class="form-label">User Name</label>
        <InputText id="userName" class="form-control" @bind-Value="secret.UserName" />
        <ValidationMessage For="@(() => secret.UserName)" />
    </div>

    <div class="col-md-6">
        <label for="password" class="form-label">Password (Decrypted for editing)</label>
        <InputText id="password" class="form-control" @bind-Value="secret.EncryptedPassword" />
        <ValidationMessage For="@(() => secret.EncryptedPassword)" />

    </div>

    <div class="form-check">
        <label class="form-check-label" for="favorite">
            Is Favorite
        </label>
        <InputCheckbox id="favorite" class="form-check-input" type="checkbox" @bind-Value="secret.Favorite" />
    </div>
    <div class="col-md-6">
        <label for="notes" class="form-label">Notes</label>
        <InputTextArea id="notes" class="form-control" @bind-Value="secret.Notes" />
        <ValidationMessage For="@(() => secret.Notes)" />
    </div>

    <button type="submit" class="btn btn-success" @onclick="Save">Save</button>

</EditForm>
<button type="button" class="btn btn-danger" @onclick="Delete">Delete</button>

@code {
    [Parameter]
    public int Id { get; set; }

    private FluentValidationValidator? validator = new FluentValidationValidator();
    Secret secret = new Secret();

    protected override async Task OnParametersSetAsync()
    {
        Log.Debug($"Decrypting secret");
        secret = await vault.GetSecretById(Id);
        secret.EncryptedPassword = vault.DecryptSecret(secret.EncryptedPassword);
    }

    private async void Save()
    {
        Log.Debug($"Edit secret: {secret}");
        await vault.EditSecret(secret.Id, secret);
        Log.Debug($"Secret saved successfully");
        uriHelper.NavigateTo("/vault", forceLoad: true);
    }
    private async void Delete()
    {
        Log.Debug($"Delete secret: {secret}");
        await vault.DeleteSecret(secret.Id);
        Log.Debug($"Secret deleted successfully");
        uriHelper.NavigateTo("/vault", forceLoad: true);
    }

    private void SubmitValidForm()
    {
        validator?.Validate(options => options.IncludeRuleSets("Names"));
        Log.Information("Form submitted Successfully");
    }
}
